Main
----------------------------
#include <iostream>
#include <string>
#include <stdexcept>
#include <windows.h>
#include "Console.h"
#include "RandomNumber.h"
#include "Creature.h"
#include "Food.h"
#include "Board.h"
#include "Input.h"
#include <vector>
#include <algorithm>
#include "Statistics.h"

using namespace std;

int main()
{
	int newGameOrExit;
	do
	{
		Console console(70, 70);													//Creating an object from Console class
		console.setColour(console.COLOUR::BLACK, console.COLOUR::LIGHT_AQUA);		//It sets color of console to black and aqua
	
		Input read;																	//Creating an object from input class
		read.readAll(console);														//It reads all variable from user such as numbers of foods and creatures

		Board board(read.getNumberOfCreature(),read.getNumberOfFood(),console);		//Here we generate an object from board class
		board.newBoard(read.getNumberOfFood(), console, read);						//Almost everything about game like generating foods, creatures, fighting, eating happens here.
		board.localStats.printAllStats(console);									//This function prints statistics of game
		
		read.newGame(console);														//This function asks to user either he wants to replay or exit
		newGameOrExit=read.getNewGameOrExit();										//This function gets user’s decision
	}while (newGameOrExit == 1);													//Game restarts if user's inoput is 1
	return 0;
}
-------------------------------
Creature Header
-------------------------------
#pragma once
#include "Food.h"

using namespace std;

class Creature
{
private:
	int id;
	int X;
	int Y;
	int hitpoint;
	int attack;					//Attack point is generated randomly and used for food fight
	int nearestFoodDistance;	
	Food nearestFood;			
	bool isSuperCreature;		//Set to true if its super creature, otherwise its false
public:
	Creature() = default;
	Creature(int, int, int, int);
	~Creature();
	int getX();
	int getY();
	int getId();
	void changeHitpoint(int);
	int getHitpoint();
	int getAttack();
	int getNearestFoodId();
	void setNearestFoodIdToDefault();
	int getNearestFoodDistance();
	void setNearestFoodDistance(int);
	Food getNearestFood();
	void setNearestFood(Food);
	bool getIsSuperCreature();
	void setSuperCreature();
};
-------------------------
Creature Cpp
-------------------------
#include "Creature.h"


Creature::Creature(int inX, int inY, int inAttack, int inId)
{
	X = inX;
	Y = inY;
	id = inId;
	attack = inAttack;
	hitpoint = 5;
	nearestFoodDistance = 100;
	isSuperCreature = false;
}

Creature::~Creature()
{
}

int Creature::getId()
{
	return id;
}

int Creature::getX()
{
	return X;
}

int Creature::getY()
{
	return Y;
}

int Creature::getHitpoint()
{
	return hitpoint;
}

void Creature::changeHitpoint(int inHitpoint)
{
	if (hitpoint + inHitpoint >= 10)
	{
		hitpoint = 10;
	}
	else
	{
		hitpoint += inHitpoint;
	}
}

int Creature::getAttack()
{
	return attack;
}

int Creature::getNearestFoodDistance()
{
	return nearestFoodDistance;
}

int Creature::getNearestFoodId()
{
	return nearestFood.getId();
}

void Creature::setNearestFoodIdToDefault()
{
	nearestFood.setId(-1);
}

void Creature::setNearestFoodDistance(int inDistance)
{
	nearestFoodDistance = inDistance;
}

Food Creature::getNearestFood()
{
	return nearestFood;
}

void Creature::setNearestFood(Food inFood)
{
	nearestFood = inFood;
}

bool Creature::getIsSuperCreature()
{
	return isSuperCreature;
}

void Creature::setSuperCreature()
{
	isSuperCreature = true;
	hitpoint = 9;
	attack = 25;
}

----------------------
Food Header
----------------------
#pragma once
using namespace std;

class Food
{
private:
	int X;
	int Y;
	int id;
	int foodSize;
	char foodPattern;	//I prefered to hold pattern of food here in case it might be wanted to change just for some spesific foods
public:
	Food() = default;
	Food(int, int, int);
	~Food();
	void sendFoodOutOfBoard();
	int getX();
	int getY();
	void setFoodSize(int);
	int getFoodSize();
	int getId();
	char getFoodPattern();
	void setId(int);
};
---------------------------
Food Cpp
----------------------------
#include "Food.h"

Food::Food(int inX, int inY, int inId)
{
	X = inX;
	Y = inY;
	id = inId;
	foodSize = 3;
	foodPattern = '#';
}

Food::~Food()
{
}

int Food::getX()
{
	return X;
}

int Food::getY()
{
	return Y;
}

char Food::getFoodPattern()
{
	return foodPattern;
}

void Food::setFoodSize(int inFoodSize)
{
	foodSize = inFoodSize;
}

int Food::getFoodSize()
{
	return foodSize;
}

int Food::getId()
{
	return id;
}

void Food::setId(int inId)
{
	id = inId;
}

void Food::sendFoodOutOfBoard()	
{
	X = 100;
	Y = 100;
}
-------------------------------
Board header
-------------------------------
#pragma once
#include <vector>
#include <iostream>
#include <string>
#include <stdexcept>
#include <windows.h>
#include "Console.h"
#include "RandomNumber.h"
#include "Creature.h"
#include "Food.h"
#include <vector>
#include <algorithm>
#include "Input.h"
#include "Statistics.h"

class Board
{
private:
	vector<Creature> creatures;
	vector<Creature> killList;
	vector<Food> foods;
	RandomNumber random;
	void generateFoods(int, Console);
	void printCreatures(Console);
	void killCreature(int);
public:
	Board(int, int, Console);
	~Board();
	Statistics localStats;
	void generateCreatures(int);
	void newBoard(int, Console, Input);
	int calculateDistance(Creature, Food);
	void findNearestFood(Input);
	bool locationCheck(Creature, Food);
	void Fight(Input);
	void eatNearestfood();
	void decreaseAllHitpoints(Input);
	void setAllNearestFoodIdAndDistanceToDefault();
	void killCreaturesInList();
	bool ifNotInKillListPush(Creature&);
	void setSuperCreatureif2CreaturesGeneratedtoSameLocation();
	void setIdToDefaultIfNotClosest();
};

--------------------------
Board Cpp
--------------------------
#include "Board.h"

Board::Board(int numberOfCreature, int numberOfFood, Console console)
{
	console.setConsoleSize(30, 31);
	console.setColour(console.COLOUR::BLACK, console.COLOUR::LIGHT_AQUA);
	creatures.reserve(numberOfCreature);
	foods.reserve(numberOfFood);
	random.initialiseSeed();
}

Board::~Board()
{
}

void Board::newBoard(int numberOfFoods, Console console,Input read)
{
	generateCreatures(read.getNumberOfCreature());			//Generates creatures, pushes them to the vector
	setSuperCreatureif2CreaturesGeneratedtoSameLocation();	//If 2 creatures are generated to same location, one disappear other one becomes superCreature
	killCreaturesInList();									//Deletes creatures from 'creatures' vector where they are also inserted into killList by previous functions
	while (creatures.size() > 0)							//Game runs as long as size of creatures vector isnt zero or less
	{
		setAllNearestFoodIdAndDistanceToDefault();			//For correct eating and fighting, 'nearestFood' object that every creatures has, has default id (-1) and default distance (100)
		printCreatures(console);							//Prints creatures to screen that they were already generated
		generateFoods(numberOfFoods, console);				//Generates foods and super foods, prints them to screen and checks if a food is dropped on a creature, if yes inserts creature to killList
		killCreaturesInList();								//Deletes creatures from 'creatures' vector where they are also inserted into killList by previous functions
		findNearestFood(read);								//Sets the neareast food to all creatures (if there is any in max eat distance)
		Fight(read);										//If distance of multiple creatures to the same food is equal to each other, they all fight, only one survives and eats
		killCreaturesInList();								//Deletes creatures from 'creatures' vector where they are also inserted into killList by previous functions			
		setIdToDefaultIfNotClosest();						//If same food is set to multiple creatures as nearest food, far away ones' nearestFoodId will be set to default (-1), so only closesnt one will be able to eat that food (the ones that their distances to same food were equal to each other already fought )
		eatNearestfood();									//Finally creautres that have nearest food, eat their foods and gain hitpoint
		decreaseAllHitpoints(read);							//Decrease hitpoint of all creatures every round by the amount the user chooses
		killCreaturesInList();									//Deletes creatures from 'creatures' vector where they are also inserted into killList by previous functions
		localStats.incRoundNumber();						//Increases round number of statistics by 1
		console.clear();									//Cleans console for next round
	}
}

void Board::generateCreatures(int numberOfCreature)		//Generates Creatures
{
	for (int i = 0; i < numberOfCreature; i++)		
	{
		creatures.push_back(Creature(random.random(0, 29), random.random(0, 29), random.random(0, 20), i));
	}

}

void Board::setSuperCreatureif2CreaturesGeneratedtoSameLocation()	//If 2 creatures are generated to same location, 
{																	//One disappear other one becomes superCreature
	if (creatures.size() >= 2)
	{
		for (int i = 0; i < creatures.size() - 1; i++)
		{
			for (int j = i + 1; j < creatures.size(); j++)
			{
				if (creatures[i].getX() == creatures[j].getX() && creatures[i].getY() == creatures[j].getY())
				{
					creatures[j].setSuperCreature();
					killList.push_back(creatures[i]);
				}
			}
		}
	}
}

void Board::printCreatures(Console console)
{
	for (int i = 0; i < creatures.size(); i++)		//Prints Creatures
	{
		console.gotoXY(creatures[i].getX(), creatures[i].getY());
		if (creatures[i].getIsSuperCreature())			// If creature is superCreature, it will be printed as yellow
		{
			console.setColour(console.COLOUR::BLACK, console.COLOUR::LIGHT_YELLOW);
			cout << creatures[i].getHitpoint();
			console.setColour(console.COLOUR::BLACK, console.COLOUR::LIGHT_AQUA);
		}
		else
		{
			cout << creatures[i].getHitpoint();			//Printing normal creature as default color
		}	
	}
	console.gotoXY(29, 29);
	getchar();
}

void Board::generateFoods(int numberOfFood, Console console)
{
	foods.clear();								//Each round a cleen food list is needed
	int tempDied=0;
	for (int i = 0; i < numberOfFood; i++)		//Generating foods
	{
		foods.push_back(Food(random.random(0, 29), random.random(0, 29), i));
		console.gotoXY(foods[i].getX(), foods[i].getY());
		cout << foods[i].getFoodPattern();				//Prints food pattern

		for (int j = 0; j < creatures.size(); j++)		//Kills creatures when food drop on them
		{
			if (locationCheck(creatures[j], foods[i]))
			{	
				killList.push_back(creatures[j]);
				tempDied++;								//SetCreaturesDiedbyFoodDrop function isnt called here to in order to increase cpu efficency
			}
		}
	}
	localStats.setCreaturesDiedbyFoodDrop(tempDied);

	for (int i = 0; i < foods.size()-1; i++)
	{
		for (int j = i + 1; j < foods.size(); j++)
		{
			if (foods[i].getX() == foods[j].getX() && foods[i].getY() == foods[j].getY())	//Create super food
			{
				foods[j].setFoodSize(6);			//Sets hitpoint of super food to 5 (1 will be decreased by other function)
				foods[i].sendFoodOutOfBoard();		//Preferd to send it out of board rather than deleting. Deleting causes program work instabil and a stabil algorithm requires too much cpu
				console.gotoXY(foods[j].getX(), foods[j].getY());
				console.setColour(console.COLOUR::BLACK, console.COLOUR::LIGHT_GREEN);	//Super food is printed in different color
				cout << foods[j].getFoodPattern();
				console.setColour(console.COLOUR::BLACK, console.COLOUR::LIGHT_AQUA);	//Sets color to default
			}
		}
	}
	console.gotoXY(29, 29);
	getchar();
}

void Board::killCreature(int j)
{
	creatures.erase(creatures.begin() + j);
}

void Board::killCreaturesInList()
{
	for (int i = 0; i < creatures.size(); i++)
	{
		if (i >= creatures.size())			//Avoids exception
			break;
		for (int j = 0; j < killList.size(); j++)
		{
			if (killList[j].getId() == creatures[i].getId())
			{
				killCreature(i);
				if (i >= creatures.size())		//Avoids exception
					break;
			}
		}
	}
	killList.clear();						//Clears kill list for next round
}

bool Board::locationCheck(Creature creature, Food food)		// Returns true if location of food and creature are same
{
	if (creature.getX() == food.getX() && creature.getY() == food.getY())
	{
		return true;
	}
	else
		return false;
}

int Board::calculateDistance(Creature creature, Food food)	//Returns distance between creature and food
{
	int x = food.getX() - creature.getX();
	int y = food.getY() - creature.getY();
	int distance = sqrt(x*x + y*y);
	return distance;
}

void Board::eatNearestfood()
{
	for (int i = 0; i < creatures.size(); i++)
	{
		if (creatures[i].getNearestFoodId() != -1)
		{
			localStats.incHowManyFoodsEaten();
			creatures[i].changeHitpoint(creatures[i].getNearestFood().getFoodSize());
		}
	}
}


void Board::findNearestFood(Input read)
{
	int minDistance = 100;
	int distance;

	for (int i = 0; i < creatures.size(); i++)
	{
		for (int j = 0; j < foods.size(); j++)
		{
			distance = calculateDistance(creatures[i],foods[j]);

			if (distance < minDistance && distance <= read.getEatDistance())
			{
				minDistance = distance;
				creatures[i].setNearestFood(foods[j]);
				creatures[i].setNearestFoodDistance(minDistance);
			}
		}
		minDistance = 100;
	}
}

bool Board::ifNotInKillListPush(Creature &creature)		//Checks if sent creatures is already in killList or not
{
	bool exist=false;
	for (int i = 0; i < killList.size(); i++)
	{
		if (creature.getId() == killList[i].getId())
		{
			exist = true;
			return false;
		}
	}
	return true;
}

void Board::Fight(Input read)
{
	if (creatures.size() >= 2)				//Avoids exception
	{
		for (int i = 0; i < creatures.size()-1; i++)
		{
			for (int j = i+1; j < creatures.size(); j++)
			{
				if (creatures[i].getNearestFoodId() == creatures[j].getNearestFoodId() &&
					creatures[i].getNearestFoodDistance() == creatures[j].getNearestFoodDistance() &&
					creatures[i].getId() != creatures[j].getId() &&
					creatures[i].getNearestFoodId() != -1)
				{
					if (creatures[i].getAttack() < creatures[j].getAttack())		//The one which its attack value is smaller dies
					{
						if(ifNotInKillListPush(creatures[i]))
						{
							killList.push_back(creatures[i]);
							localStats.incNumberOfCreaturesDiedInFight();
						}
							
					}
					else            //Else other one dies (if their attack values are equal to each other the one with index J dies)
					{
						if (ifNotInKillListPush(creatures[j]))
						{
							killList.push_back(creatures[j]);
							localStats.incNumberOfCreaturesDiedInFight();
						}
					}
				}
			}
		}
	}
}

void Board::decreaseAllHitpoints(Input read)		//Decrease hitpoint of all creatures every round
{
	for (int i = 0; i < creatures.size(); i++)
	{
		creatures[i].changeHitpoint(-(read.getAmountOfDecreaseInHitpoint()));	//Decrease amount is got from user
		if (creatures[i].getHitpoint() <= 0)
		{
			if(ifNotInKillListPush(creatures[i]))
				killList.push_back(creatures[i]);
		}
	}
}

void Board::setAllNearestFoodIdAndDistanceToDefault()
{
	for (int i = 0; i < creatures.size(); i++)
	{
		creatures[i].setNearestFoodIdToDefault();
		creatures[i].setNearestFoodDistance(100);
	}
}

void Board::setIdToDefaultIfNotClosest()	
{
	if (creatures.size() >= 2)
	{
		for (int i = 0; i < creatures.size() - 1; i++)
		{
			for (int j = i + 1; j < creatures.size(); j++)
			{
				if (creatures[i].getNearestFoodId() == creatures[j].getNearestFoodId())
				{
					if (creatures[i].getNearestFoodDistance() < creatures[j].getNearestFoodDistance())
					{
						creatures[j].setNearestFoodIdToDefault();
					}
					else
					{
						creatures[i].setNearestFoodIdToDefault();
					}
				}
			}
		}
	}
}
------------------
Input Header
------------------
#pragma once
#include "Console.h"
#include <iostream>
#include <sstream>
#include <string>
#include <limits>
class Input
{
private:
	int numberOfFood;
	int numberOfCreature;
	int eatDistance;
	int amountOfDecreaseInHitpoint;
	int newOrExit;
	void readNumberOfFood();
	void readNumberOfCreatures();
	void readEatDistance();
	void readAmountOfDecreaseInHitpoint();
public:
	Input();
	~Input();
	int getNumberOfCreature();
	int getNumberOfFood();
	int getEatDistance();
	int getAmountOfDecreaseInHitpoint();
	void readAll(Console);
	void newGame(Console);
	int getNewGameOrExit();
};

--------------------
Input Cpp
--------------------
#include "Input.h"
#include <iostream>

Input::Input()
{
}

Input::~Input()
{
}

void Input::readAll(Console console)
{
	readNumberOfFood();
	readNumberOfCreatures();
	readEatDistance();
	readAmountOfDecreaseInHitpoint();
	console.clear();
}

void Input::readNumberOfFood()
{
	std::cout << "Enter number of food: between 0 and 500: ";
	std::cin >> numberOfFood;
	while (numberOfFood > 500 || numberOfFood < 0)
	{
		std::cout << "Invalid input please enter between 0 and 500: ";
		std::cin >> numberOfFood;
	}
}

void Input::readNumberOfCreatures()
{
	std::cout << "Enter number of creatures between 0 and 500: ";
	std::cin >> numberOfCreature;
	while (numberOfCreature > 500 || numberOfCreature < 0)
	{
		std::cout << "Invalid input please enter between 0 and 500: ";
		std::cin >> numberOfCreature;
	}
}

void Input::readEatDistance()
{
	std::cout << "Enter max eat distance between 0 and 10: ";
	std::cin >> eatDistance;
	while (eatDistance > 10 || eatDistance < 0)
	{
		std::cout << "Invalid input please enter between 0 and 10: ";
		std::cin >> eatDistance;
	}
}

void Input::readAmountOfDecreaseInHitpoint()
{
	std::cout << "How much hit point should be decreased from each creature" << std::endl << "every round between 0 and 4: ";
	std::cin >> amountOfDecreaseInHitpoint;
	while (amountOfDecreaseInHitpoint > 4 || amountOfDecreaseInHitpoint < 0)
	{
		std::cout << "Invalid input please enter between 0 and 4: ";
		std::cin >> amountOfDecreaseInHitpoint;
	}
}

void Input::newGame(Console console)
{
	std::cout << "Please enter 1 to restart game or 2 to exit: ";
	std::cin >> newOrExit;
	while (newOrExit != 1 && newOrExit != 2)
	{
		std::cout << "Invalid input please enter 1 or 2: ";
		std::cin >> newOrExit;
	}
	console.clear();
}

int Input::getNewGameOrExit()
{
	return newOrExit;
}

int Input::getAmountOfDecreaseInHitpoint()
{
	return amountOfDecreaseInHitpoint;
}

int Input::getNumberOfCreature()
{
	return numberOfCreature;
}

int Input::getNumberOfFood()
{
	return numberOfFood;
}

int Input::getEatDistance()
{
	return eatDistance;
}
----------------------
Statistics Header
----------------------
#pragma once
#include "Console.h"

class Statistics
{
private:
	int roundNumber;
	int creaturesDiedbyFoodDrop;
	int howManyFoodsEaten;
	int numberOfCreaturesDiedInFight;
public:
	int getNumberOfCreaturesDiedInFight();
	Statistics();
	~Statistics();
	void incRoundNumber();
	int getRoundNumber();
	void setCreaturesDiedbyFoodDrop(int);
	int getCreaturesDiedbyFoodDrop();
	void incHowManyFoodsEaten();
	int getHowManyFoodsEaten();
	void printAllStats(Console);
	void incNumberOfCreaturesDiedInFight();
};
--------------------------
Statistics Cpp
--------------------------
#include "Statistics.h"


Statistics::Statistics()
{
	roundNumber = 0;
	creaturesDiedbyFoodDrop = 0;
	howManyFoodsEaten = 0;
	numberOfCreaturesDiedInFight=0;
}

Statistics::~Statistics()
{
}

void Statistics::printAllStats(Console console)
{
	console.setConsoleSize(70, 70);
	console.setColour(console.COLOUR::BLUE, console.COLOUR::WHITE);
	std::cout << "Statistics of Game" << std::endl << std::endl;
	std::cout << "Total round number: " << getRoundNumber() << std::endl;
	std::cout << "Total number of creatures that killed by food drop: " << getCreaturesDiedbyFoodDrop() << std::endl;
	std::cout << "Total number of foods eaten by creatures: " << getHowManyFoodsEaten() << std::endl;
	std::cout << "Total number of creatures that died in food fight: " << getNumberOfCreaturesDiedInFight() << std::endl << std::endl;
}

int Statistics::getRoundNumber()
{
	return roundNumber;
}

void Statistics::incRoundNumber()
{
	roundNumber++;
}

int Statistics::getCreaturesDiedbyFoodDrop()
{
	return creaturesDiedbyFoodDrop;
}

void Statistics::setCreaturesDiedbyFoodDrop(int inCreaturesDiedbyFoodDrop)
{
	creaturesDiedbyFoodDrop += inCreaturesDiedbyFoodDrop;
}

int Statistics::getHowManyFoodsEaten()
{
	return howManyFoodsEaten;
}

void Statistics::incHowManyFoodsEaten()
{
	howManyFoodsEaten++;
}

void Statistics::incNumberOfCreaturesDiedInFight()
{
	numberOfCreaturesDiedInFight++;
}

int Statistics::getNumberOfCreaturesDiedInFight()
{
	return numberOfCreaturesDiedInFight;
}